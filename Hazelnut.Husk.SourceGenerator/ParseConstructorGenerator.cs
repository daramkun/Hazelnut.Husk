using System.Text;

namespace Hazelnut.Husk.SourceGenerator;

public static class ParseConstructorGenerator
{
    public static string GenerateParser(string namespaceName, string typeKind, string typeName,
        List<ArgumentInfo> arguments, bool needToMakeDefaultConstructor)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// This file is generated by Hazelnut.Husk Source Generator.");
        builder.AppendLine();
        builder.AppendLine("#nullable enable");
        builder.AppendLine("using System;");
        builder.AppendLine("using System.Collections.Generic;");
        builder.AppendLine("using System.Linq;");
        builder.AppendLine("using Hazelnut.Husk;");
        builder.AppendLine();

        if (!string.IsNullOrEmpty(namespaceName))
        {
            builder.AppendLine($"namespace {namespaceName};");
            builder.AppendLine();
        }

        builder.AppendLine($"partial {typeKind} {typeName}");
        builder.AppendLine("{");
        if (needToMakeDefaultConstructor)
        {
            builder.AppendLine($"    public {typeName}() {{ }}");
            builder.AppendLine();
        }
        builder.AppendLine($"    public {typeName}(params string[] args)");
        builder.AppendLine("    {");
        builder.AppendLine("        Queue<string> argsQueue = new(args);");
        builder.AppendLine("        List<string> restList = [];");
        builder.AppendLine("        string? currentOption = null;");
        builder.AppendLine("        var currentOrder = 0;");
        
        // Generate required tracking for each argument
        var requiredArguments = arguments.Where(a => a.IsRequired).ToList();
        foreach (var arg in requiredArguments)
        {
            builder.AppendLine($"        bool {arg.Name}_processed = false;");
        }
        
        builder.AppendLine();
        builder.AppendLine("        while (argsQueue.TryDequeue(out var arg))");
        builder.AppendLine("        {");
        builder.AppendLine("            if (arg.StartsWith(\"--\") || arg.StartsWith('-'))");
        builder.AppendLine("            {");
        builder.AppendLine("                var equalIndex = arg.IndexOf('=');");
        builder.AppendLine("                if (equalIndex == -1)");
        builder.AppendLine("                {");
        
        // Generate switch cases for options without values
        GenerateOptionSwitch(builder, arguments, false);
        
        builder.AppendLine("                }");
        builder.AppendLine("                else");
        builder.AppendLine("                {");
        builder.AppendLine("                    var argName = arg[..equalIndex];");
        builder.AppendLine("                    var argValue = arg[(equalIndex + 1)..];");
        
        // Generate switch cases for options with values
        GenerateOptionSwitch(builder, arguments, true);
        
        builder.AppendLine("                }");
        builder.AppendLine("            }");
        builder.AppendLine("            else");
        builder.AppendLine("            {");
        builder.AppendLine("                if (currentOption != null)");
        builder.AppendLine("                {");
        
        // Generate switch for current option value assignment
        GenerateCurrentOptionSwitch(builder, arguments);
        
        builder.AppendLine("                    currentOption = null;");
        builder.AppendLine("                }");
        builder.AppendLine("                else");
        builder.AppendLine("                {");
        
        // Generate positional argument handling
        GeneratePositionalArgumentHandling(builder, arguments);
        
        builder.AppendLine("                }");
        builder.AppendLine("            }");
        builder.AppendLine("        }");
        
        // Generate required argument validation
        if (requiredArguments.Any())
        {
            builder.AppendLine();
            builder.Append("        if (");
            builder.Append(string.Join(" || ", requiredArguments.Select(arg => $"!{arg.Name}_processed")));
            builder.AppendLine(")");
            builder.AppendLine("            throw new ArgumentException(\"Required arguments are missing\");");
        }
        
        builder.AppendLine("    }");
        builder.AppendLine("}");
        
        return builder.ToString();
    }
    
    private static void GenerateOptionSwitch(StringBuilder builder, List<ArgumentInfo> arguments, bool withValue)
    {
        builder.AppendLine($"                    switch ({(withValue ? "argName" : "arg")})");
        builder.AppendLine("                    {");
        
        foreach (var arg in arguments)
        {
            if (!string.IsNullOrEmpty(arg.LongName))
            {
                var longName = arg.LongName.StartsWith("--") ? arg.LongName : $"--{arg.LongName}";
                builder.AppendLine($"                        case \"{longName}\":");
            }
            
            if (!string.IsNullOrEmpty(arg.ShortName))
            {
                var shortName = arg.ShortName.StartsWith("-") ? arg.ShortName : $"-{arg.ShortName}";
                builder.AppendLine($"                        case \"{shortName}\":");
            }
            
            if (withValue)
            {
                GenerateAssignmentCode(builder, arg, "argValue", "                            ");
            }
            else if (arg.Type == "bool")
            {
                builder.AppendLine($"                            {arg.Name} = true;");
            }
            else
            {
                builder.AppendLine("                            currentOption = arg;");
            }
            
            if (arg.IsRequired)
            {
                builder.AppendLine($"                            {arg.Name}_processed = true;");
            }
            
            builder.AppendLine("                            break;");
        }
        
        builder.AppendLine("                        default:");
        builder.AppendLine("                            restList.Add(arg);");
        builder.AppendLine("                            break;");
        builder.AppendLine("                    }");
    }
    
    private static void GenerateCurrentOptionSwitch(StringBuilder builder, List<ArgumentInfo> arguments)
    {
        builder.AppendLine("                    switch (currentOption)");
        builder.AppendLine("                    {");
        
        foreach (var arg in arguments.Where(a => a.Type != "bool"))
        {
            if (!string.IsNullOrEmpty(arg.LongName))
            {
                var longName = arg.LongName.StartsWith("--") ? arg.LongName : $"--{arg.LongName}";
                builder.AppendLine($"                        case \"{longName}\":");
            }
            
            if (!string.IsNullOrEmpty(arg.ShortName))
            {
                var shortName = arg.ShortName.StartsWith("-") ? arg.ShortName : $"-{arg.ShortName}";
                builder.AppendLine($"                        case \"{shortName}\":");
            }
            
            GenerateAssignmentCode(builder, arg, "arg", "                            ");
            
            if (arg.IsRequired)
            {
                builder.AppendLine($"                            {arg.Name}_processed = true;");
            }
            
            builder.AppendLine("                            break;");
        }
        
        builder.AppendLine("                        default:");
        builder.AppendLine("                            restList.Add(currentOption);");
        builder.AppendLine("                            restList.Add(arg);");
        builder.AppendLine("                            break;");
        builder.AppendLine("                    }");
    }
    
    private static void GeneratePositionalArgumentHandling(StringBuilder builder, List<ArgumentInfo> arguments)
    {
        var positionalArgs = arguments.Where(a => a.Order >= 0).OrderBy(a => a.Order).ToList();
        
        if (positionalArgs.Any())
        {
            builder.AppendLine("                    switch (currentOrder)");
            builder.AppendLine("                    {");
            
            foreach (var arg in positionalArgs)
            {
                builder.AppendLine($"                        case {arg.Order}:");
                GenerateAssignmentCode(builder, arg, "arg", "                            ");
                
                if (arg.IsRequired)
                {
                    builder.AppendLine($"                            {arg.Name}_processed = true;");
                }
                
                builder.AppendLine("                            break;");
            }
            
            builder.AppendLine("                        default:");
            builder.AppendLine("                            restList.Add(arg);");
            builder.AppendLine("                            break;");
            builder.AppendLine("                    }");
        }
        else
        {
            builder.AppendLine("                    restList.Add(arg);");
        }
        
        builder.AppendLine("                    ++currentOrder;");
    }
    
    private static void GenerateAssignmentCode(StringBuilder builder, ArgumentInfo arg, string valueVar, string indent)
    {
        if (arg.Type == "bool")
        {
            builder.AppendLine($"{indent}{arg.Name} = ParserRuntime.ParseBoolean({valueVar});");
        }
        else if (arg.IsEnum)
        {
            builder.AppendLine($"{indent}{arg.Name} = ({arg.EnumType})Enum.Parse(typeof({arg.EnumType}), {valueVar});");
        }
        else if (arg.IsCollection)
        {
            // Collection handling - this would need more complex logic
            builder.AppendLine($"{indent}// TODO: Collection handling for {arg.Name}");
        }
        else
        {
            builder.AppendLine($"{indent}{arg.Name} = ({arg.Type})Convert.ChangeType({valueVar}, typeof({arg.Type}));");
        }
    }
}